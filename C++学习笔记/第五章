函数的调用完成两项工作:一是用实参初始化函数对应的形参,二是将控制权转移给被调用函数,此时，主调函数的执行被暂时中断,被调函数开始执行.
当遇到一条return语句时函数结束执行过程，和函数调用一样,return 语句也完全分成两项工作：一是返回return语句中的值,二是将控制权从被调函数转移回调函数,函数的返回值用于初始化调用表达式的结果,之后继续完成调用所在的表达式的剩余部分;
局部静态对象在程序的执行路径第一次经过定义语句时初始化,并且直到程序结束才被销毁,在此期间即使对象所在的函数结束执行也不会对它有影响.
定义函数申明的头文件应该被包含到定义函数的源文件中.
和其它变量一样，如果形参是引用类型，它将绑定到对应的实参上,否则，将实参的值拷贝给赋给形参。当形参是引用类型时，我们说它对应的实参被引用传递或者函数被传引用调用,和其它引用一样,引用形参也是绑定的对象的别名,也就是说,引用参数是实参的别名.
如果函数无须改变形参的值，最好将其申明为常量引用.
当形参有顶层const时，传给它常量对象或者非常量对象都是可以的.
指针或引用形参与const
我们可以使用非常量初始化一个底层const对象,但是反过来不行；但是反过来不行,同时一个普通的引用必须用同类型的对象初始化;
int i =42;
const int *cp = &i;  //正确,但是cp不能改变i
const int &r=i;       //正确,但是r不能改变i
const int &r2 = 42;   
int *p = cp;        //错误,p的类型和cp的类型不匹配;
int &r3=r;          //错误，r3的类型和r的类型不匹配　；
int &r4 = 42;       //不能用字面值初始化一个非常量引用；
将同样的初始化规则应用到参数传递上可得如下形式:
int i = 0;
const int ci = i;
string::size_type ctr = 0;
我们能用字面值初始化常量引用.
尽量使用常量引用:把函数不会改变的形参列表定义成（普通的）引用是一种比较常见的错误，这么做带给函数的调用者一种误导，即函数可以修改它的实参的值，此外，使用引用而非常量引用也会极大地限制函数所能接受的实参类型.因为我们不能把const对象，字面值或者需要类型转换的对象传递给普通的引用形参.
 如果我们传给print函数的是一个数组,则实参自动转换成指向数组首元素的指针,；
 为了编写能处理不同数量实参的函数,c++11,提供了两种主要的方法:如果所有的实参类型相同,可以传递一个名为initializer_list的标准库类型
 initializer_list提供的操作
 initializer_list<T> lst;    //默认初始化T类型的空列表
 initializer_list<T> lst(a,b,c...);   //lstd的元素数量和初始值一样多;lst的元素是对应初始值的副本,列表中的元素是const；
 lst2(lst)拷贝或赋值一个initialiser_list对象不会拷贝列表中的元素;拷贝后,原始列表和副本共享元素
 lst.size()　　／／列表中的元素数量
lst.begin()  返回指向lst中首元素的指针
lst.end()  返回指向lst尾元素下一个位置的指针
initializer_list对象中的元素永远是常量值，我们无法改变initializer_list对象中的元素的值;
如果想向initializer_list形参中传递一个值的序列, 则必须把序列放在一对花括号里;
返回一个值的方式和初始化一个变量或形参的方式完全一样；返回的值用于初始化调用点的一个临时变量, 该临时量就是函数调用的结果;
如果函数返回引用,不管是调用函数还是它所引用的对象的一个别名


































