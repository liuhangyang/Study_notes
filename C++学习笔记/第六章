不要返回局部变量对象的引用或指针
函数完成后,它所占用的存储空间也随之被释放掉了,因此,函数终止意味着局部变量的引用将指向不再有效的内存区域;
函数的返回类型决定函数调用是否是左值，调用一个返回引用的函数得到左值,其他返回类型都是右值,值得注意的是，我们能通过为返回类型是非常量引用的函数赋值;
如果返回类型是长常量引用,我们不能给调用的结果赋值;
列表初始化返回值:
函数可以返回花括号包围的值的列表,类似于其他返回结果,此处的列表也用来对表示函数返回的临时量进行初始化,如果列表为空,临时量执行默认初始化;
如果返回类型是vector对象,{}中可以有多个值,如果返回类型是内置类型　，则{}中最多包含一个值,而且该值所占的空间不应该大于目标类型的空间；
cstdlib头文件中有EXIT_FAILURE,和EXIT_SUCCESS;
typedef int arrT[10];
using arrT=int[10];      //arrT代表指向元素个数为10　的数组;
arrT *func(int i);    //func返回一个指向含有10个整数的数组的指针;
其中arrT是含有10个整数的数组的别名, 因为我们无法返回数组,所以将返回类型定义成数组的指针，因此,func函数接受一个int实参,返回一个指向包含10个整数的数组的指针;
申明一个返回数组指针的函数：
要想在申明func时不使用类型名,我们必须牢记被定义的名字后面的维度;
int arr[10];   //arr是一个含有10个整数的数组;
如果我们想定义一个返回数组指针的函数,则数组的维度必须跟在函数名字之后,函数的形参列表也跟在函数名字后面且形参列表应该先于数组的维度,因此，返回数组指针的函数形式如下所示;
Type (*function(parameter_list) [dimension]
Type表示元素的类型,dimension表示数组的大小;(*function(parameter_list))两端的括号必须存在；
举个例子int (*func(int i)[10];
可以按照以下顺序来逐层理解该申明的含义:
func(int i)表示调用func函数时需要一个int类型的实参;
(*func(int i)) [10]  表示解引用func的调用将得到一个大小是10的数组;
auto 不会生成一个引用类型;
只是返回类型不同不能构成重载;
顶层的const不能影响传入函数的对象,一个拥有顶层const的形参无法和另一个没有顶层const的形参区分开来;
Record lookup(Phone) 和Record　lookup(const Phone)　//第二个重复申明了lookup()；
另一方面,如果形参是某种类型的指针或引用，则通过区分其指向的是常量对象还是非常量对象可以实现函数重载;此时const是底层的;
例如:Record lookup(Account&);和Record　lookup(const Account&);//新函数，作用于常量引用;
Record lookup(Account *);和Record　lookup(const Account*); //新函数, 作用于指向常量的指针;
编译器可以通过实参来推断应该调用哪个函数,因为const类型不能转换成其它类型;相反的,非常量可以转换成const, 所以上面的4个函数都能作用于非常量对象或者非常量对象的指针,但是,当我们传递一个非常量对象的指针时，编译器会优先选用非常量的版本;
重载与作用域:如果我们在内层作用域中声明名字,它将隐藏外层作用域中申明的同名实体;
当我们调用函数时，编译器首先寻找对该函数名的声明,找到的是接受int值的那个局部声明.一旦在当前作用域中找到了所需的名字, 编译器就会忽略掉外层作用域中的同名实体;
在c++中, 名字查找发生在类型检查之前;
默认实参:调用含有默认实参的函数时，可以包含该实参，也可以省略该实参;
一旦某个形参被赋予了默认值, 它后面的所有形参都必须有默认值;
局部变量不能作为默认实参,除此之外，只要表达式的类型能转换成形参所需的类型, 该表达式就能作为默认实参;
内联函数可避免函数调用的开销:
将函数指定为内联函数,通常就是将它在每个调用点上"内联的"展开；
内联说明只是向编译器发出一个请求, 编译器可以选择忽略这个请求;
constexpr函数
constexpr函数是指能用于常量表达式的函数,定义constexpr函数的方法与其它函数类似,但是，函数的返回类型及所有形参的类型都得是字面值类型,而且函数体中必须有且只有一条return语句;
consstexpr函数被隐式的定义为内联函数;
constecpr函数不一定要返回常量表达式;
内联函数和constexpr函数可以在程序中多次定义,不过,对于某个给定的内联函数或者constexpr函数来说,它的多个定义必须完全一致, 所以,内联函数和constexpr函数通常定义在头文件中;
assert预处理宏
assert是一种预处理宏,所谓预处理宏其实是一个预处理变量,它的行为有点类似于内联函数,assert宏使用一个表达式作为它的条件;
assert(expr);
首先对expr求值,如果表达式为假(即０),assert输出信息并终止程序的执行.如果表达式为真,assert什么也不做;
assert宏定义在cassert头文件中,预处理名字由预处理器而非编译器管理,因此我们可以直接使用预处理名字而无须提供using声明,也就是说，我们使用assert而不是std::assert;
_ _func_ _是编译器定义的一个局部变量,用于存放函数的名字（这是编译器定义的局部变量）
预处理器还定义了另外4个对于程序调试很有用的名字:
_ _FILE_ _   //存放文件名的字符串字面值
_ _LINE_ _   //存放当前行号的整数字面值
_ _TIME_ _  //存放文件编译时间的字符串字面值
_ _DATE_ _   //存放文件编译日期的字符串面值;
调用重载函数时应尽量避免强制类型转换,如果在实际应用中确实需要强制类型转换,则说明我们设计的形参集合不合理;
重载函数的指针:
编译器通过指针类型确定选择哪个函数,指针类型必须与重载函数中的某一个精确的匹配;
当用decltype(函数名)　p 时，它不会将函数类型自动转换为指针类型,他会返回函数类型;

 



























